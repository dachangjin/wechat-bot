"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PUPPET = __importStar(require("wechaty-puppet"));
const wechaty_1 = require("wechaty");
const puppet_padlocal_js_1 = __importDefault(require("../src/puppet-padlocal.js"));
const config_1 = __importDefault(require("config"));
const qrcode_terminal_1 = __importDefault(require("qrcode-terminal"));
const is_type_js_1 = require("../src/padlocal/utils/is-type.js");
// log.level("silly");
const token = config_1.default.get("padLocal.token");
const puppet = new puppet_padlocal_js_1.default({ token });
const LOGPRE = "[Demo]";
async function getMessagePayload(message) {
    const recallUserId = config_1.default.get("test.push.recallUserId");
    switch (message.type()) {
        case PUPPET.types.Message.Text:
            if (message.talker().id === recallUserId && message.text().indexOf("recall") !== -1) {
                await message.recall();
            }
            break;
        case PUPPET.types.Message.Attachment:
        case PUPPET.types.Message.Audio: {
            const attachFile = await message.toFileBox();
            const dataBuffer = await attachFile.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message audio or attach: ${dataBuffer.length}`);
            break;
        }
        case PUPPET.types.Message.Video: {
            const videoFile = await message.toFileBox();
            const videoData = await videoFile.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message video: ${videoData.length}`);
            break;
        }
        case PUPPET.types.Message.Emoticon: {
            const emotionFile = await message.toFileBox();
            const emotionJSON = emotionFile.toJSON();
            wechaty_1.log.info(LOGPRE, `get message emotion json: ${JSON.stringify(emotionJSON)}`);
            const emotionBuffer = await emotionFile.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message emotion: ${emotionBuffer.length}`);
            break;
        }
        case PUPPET.types.Message.Image: {
            const messageImage = await message.toImage();
            const thumbImage = await messageImage.thumbnail();
            const thumbImageData = await thumbImage.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message image, thumb: ${thumbImageData.length}`);
            const hdImage = await messageImage.hd();
            const hdImageData = await hdImage.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message image, hd: ${hdImageData.length}`);
            const artworkImage = await messageImage.artwork();
            const artworkImageData = await artworkImage.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message image, artwork: ${artworkImageData.length}`);
            break;
        }
        case PUPPET.types.Message.Url: {
            const urlLink = await message.toUrlLink();
            wechaty_1.log.info(LOGPRE, `get message url: ${JSON.stringify(urlLink)}`);
            const urlThumbImage = await message.toFileBox();
            const urlThumbImageData = await urlThumbImage.toBuffer();
            wechaty_1.log.info(LOGPRE, `get message url thumb: ${urlThumbImageData.length}`);
            break;
        }
        case PUPPET.types.Message.MiniProgram: {
            const miniProgram = await message.toMiniProgram();
            wechaty_1.log.info(`MiniProgramPayload: ${JSON.stringify(miniProgram)}`);
            break;
        }
    }
}
const bot = wechaty_1.WechatyBuilder.build({
    name: "DemoBot",
    puppet,
});
bot
    .on("scan", (qrcode, status) => {
    if (status === wechaty_1.ScanStatus.Waiting && qrcode) {
        wechaty_1.log.info(LOGPRE, `onScan: ${wechaty_1.ScanStatus[status]}(${status})\n\n ▼▼▼ Please scan following qr code to login ▼▼▼\n`);
        qrcode_terminal_1.default.generate(qrcode, { small: true });
    }
    else {
        wechaty_1.log.info(LOGPRE, `onScan: ${wechaty_1.ScanStatus[status]}(${status})`);
    }
})
    .on("login", (user) => {
    wechaty_1.log.info(LOGPRE, `${user} login`);
})
    .on("logout", (user, reason) => {
    wechaty_1.log.info(LOGPRE, `${user} logout, reason: ${reason}`);
})
    .on("ready", () => {
    wechaty_1.log.info(LOGPRE, ">>>>>>>> bot is ready <<<<<<<<");
})
    .on("message", async (message) => {
    wechaty_1.log.info(LOGPRE, `on message: ${message.toString()}`);
    const forwardFrom = config_1.default.get("test.push.forwardFrom");
    const forwardTo = config_1.default.get("test.push.forwardTo");
    if (message.type() === PUPPET.types.Message.Text) {
        // ding-dong bot
        if (message.to()?.self() && message.text().indexOf("ding") !== -1) {
            await message.talker().say(message.text().replace("ding", "dong"));
        }
    }
    if (message.talker().id === forwardFrom && message.listener()?.id === forwardFrom) {
        if (message.type() === PUPPET.types.Message.Unknown) {
            return;
        }
        try {
            let to;
            if ((0, is_type_js_1.isContactId)(forwardTo)) {
                to = await bot.Contact.find({ id: forwardTo });
            }
            else {
                to = await bot.Room.find({ id: forwardTo });
            }
            const newMessage = await message.forward(to);
            await getMessagePayload(newMessage);
        }
        catch (e) {
            wechaty_1.log.error(LOGPRE, `Error while forwarding message: ${e.stack}`);
        }
    }
    await getMessagePayload(message);
})
    .on("room-invite", async (roomInvitation) => {
    wechaty_1.log.info(LOGPRE, `on room-invite: ${roomInvitation}`);
})
    .on("room-join", (room, inviteeList, inviter, date) => {
    wechaty_1.log.info(LOGPRE, `on room-join, room:${room}, inviteeList:${inviteeList}, inviter:${inviter}, date:${date}`);
})
    .on("room-leave", (room, leaverList, remover, date) => {
    wechaty_1.log.info(LOGPRE, `on room-leave, room:${room}, leaverList:${leaverList}, remover:${remover}, date:${date}`);
})
    .on("room-topic", (room, newTopic, oldTopic, changer, date) => {
    wechaty_1.log.info(LOGPRE, `on room-topic, room:${room}, newTopic:${newTopic}, oldTopic:${oldTopic}, changer:${changer}, date:${date}`);
})
    .on("friendship", (friendship) => {
    wechaty_1.log.info(LOGPRE, `on friendship: ${friendship}`);
})
    .on("error", (error) => {
    wechaty_1.log.info(LOGPRE, `on error: ${error.toString()}\n${error.stack}`);
});
bot
    .start()
    .then(() => {
    wechaty_1.log.info(LOGPRE, "started.");
    return null;
})
    .catch(console.error);
//# sourceMappingURL=demo.js.map