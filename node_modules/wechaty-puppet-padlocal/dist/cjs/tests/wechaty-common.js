"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareSingedOnBot = exports.createBot = void 0;
const wechaty_1 = require("wechaty");
const config_1 = __importDefault(require("config"));
const puppet_padlocal_js_1 = __importDefault(require("../src/puppet-padlocal.js"));
// log.level("silly");
function createBot() {
    const token = config_1.default.get("padLocal.token");
    const puppet = new puppet_padlocal_js_1.default({
        token,
    });
    return wechaty_1.WechatyBuilder.build({
        name: "TestBot",
        puppet,
    });
}
exports.createBot = createBot;
async function prepareSingedOnBot(prepareBotFunc) {
    const bot = createBot();
    bot.on("scan", (qrcode, status) => {
        if (status === wechaty_1.ScanStatus.Waiting && qrcode) {
            const qrcodeImageUrl = ["https://api.qrserver.com/v1/create-qr-code/?data=", encodeURIComponent(qrcode)].join("");
            wechaty_1.log.info("TestBot", "onScan: %s(%s) - %s", wechaty_1.ScanStatus[status], status, qrcodeImageUrl);
        }
        else {
            wechaty_1.log.info("TestBot", "onScan: %s(%s)", wechaty_1.ScanStatus[status], status);
        }
    });
    bot.on("login", (user) => {
        wechaty_1.log.info("TestBot", "%s login", user);
    });
    bot.on("logout", (user, reason) => {
        wechaty_1.log.info("TestBot", "%s logout, reason:%s", user, reason);
    });
    await bot.start();
    wechaty_1.log.info("TestBot", "TestBot started.");
    await prepareBotFunc?.(bot);
    await bot.ready();
    wechaty_1.log.info("TestBot", "TestBot ready.");
    return bot;
}
exports.prepareSingedOnBot = prepareSingedOnBot;
//# sourceMappingURL=wechaty-common.js.map