"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = __importDefault(require("config"));
const wechaty_1 = require("wechaty");
const file_box_1 = require("file-box");
const wechaty_common_js_1 = require("./wechaty-common.js");
const PUPPET = __importStar(require("wechaty-puppet"));
let bot;
beforeAll(async () => {
    bot = await (0, wechaty_common_js_1.prepareSingedOnBot)();
});
afterAll(async () => {
    await bot.stop();
});
describe("contact", () => {
    test("set self name", async () => {
        const self = bot.currentUser;
        const oldName = self.name();
        console.info(`old name: ${oldName}`);
        const toName = config_1.default.get("test.contact.changeNickName");
        await self.name(toName);
        const newName = self.name();
        expect(newName).toEqual(toName);
        console.info(`new name: ${newName}`);
    });
    test("self qr code", async () => {
        const self = bot.currentUser;
        const qrStr = await self.qrcode();
        expect(qrStr.length).toBeGreaterThan(0);
        console.info(`qr: ${qrStr}`);
    });
    test("set self signature", async () => {
        const toSignature = config_1.default.get("test.contact.changeSignature");
        const self = bot.currentUser;
        await self.signature(toSignature);
    });
    test("set other contact alias", async () => {
        const userName = config_1.default.get("test.contact.alias.userName");
        const toAlias = config_1.default.get("test.contact.alias.aliasName");
        const contact = (await bot.Contact.find({ id: userName }));
        const oldAlias = await contact.alias();
        console.info(`old alias: ${oldAlias}`);
        await contact.alias(toAlias);
        const newAlias = await contact.alias();
        expect(newAlias).toEqual(toAlias);
        console.info(`new alias: ${newAlias}`);
    });
    test("contact avatar", async () => {
        const selfContact = bot.currentUser;
        const selfAvatarFileBox = await selfContact.avatar();
        expect(selfAvatarFileBox).toBeTruthy();
        const userName = config_1.default.get("test.contact.getAvatarUserName");
        const contact = (await bot.Contact.find({ id: userName }));
        const otherAvatar = await contact.avatar();
        expect(otherAvatar).toBeTruthy();
    });
    test("contact list", async () => {
        const contactList = await bot.Contact.findAll();
        expect(contactList.length).toBeGreaterThan(0);
    });
    test("delete contact", async () => {
        const deleteUserName = config_1.default.get("test.contact.deleteUserName");
        const puppet = bot.puppet;
        await puppet.contactDelete(deleteUserName);
        const contact = await bot.Contact.find({ id: deleteUserName });
        expect(contact.friend()).toBeFalsy();
    });
});
describe("tag", () => {
    const userName = config_1.default.get("test.tag.targetUserName");
    const tagName = config_1.default.get("test.tag.addDeleteTagName");
    test("add user tag", async () => {
        const tag = await bot.Tag.get(tagName);
        const contact = await bot.Contact.find({ id: userName });
        await tag.add(contact);
    });
    test("delete user tag", async () => {
        const tag = await bot.Tag.get(tagName);
        const contact = await bot.Contact.find({ id: userName });
        await tag.remove(contact);
    });
    test("delete tag", async () => {
        const tag = await bot.Tag.get(tagName);
        await bot.Tag.delete(tag);
    });
    test("get contact tag list", async () => {
        const contact = await bot.Contact.find({ id: userName });
        const tags = await contact.tags();
        console.info(tags);
    });
});
describe("friendship", () => {
    const hello = config_1.default.get("test.friendship.add.hello");
    test("accept", async () => {
        const friendshipId = config_1.default.get("test.friendship.acceptId");
        const friendship = await bot.Friendship.load(friendshipId);
        await friendship.ready();
        await friendship.accept();
    });
    test("add", async () => {
        const userName = config_1.default.get("test.friendship.add.userName");
        const contact = await bot.Contact.find({ id: userName });
        expect(contact).toBeTruthy();
        await bot.Friendship.add(contact, hello);
    });
    test("search phone ", async () => {
        const searchPhone = config_1.default.get("test.friendship.search.phone");
        const contact = await bot.Friendship.search({ phone: searchPhone });
        expect(contact).toBeTruthy();
        await bot.Friendship.add(contact, hello);
    });
    test("search weixin ", async () => {
        const searchWeixin = config_1.default.get("test.friendship.search.weixin");
        const contact = await bot.Friendship.search({ weixin: searchWeixin });
        expect(contact).toBeTruthy();
        await bot.Friendship.add(contact, hello);
    });
});
const toChatRoomId = config_1.default.get("test.message.send.chatroomId");
const toUserName = config_1.default.get("test.message.send.toUserName");
const expectSendMessage = async (message, expectedMessageType) => {
    const selfContact = bot.currentUser;
    expect(message).toBeTruthy();
    expect(message.talker().id).toEqual(selfContact.id);
    expect(message.to() || message.room()).toBeTruthy();
    expect(message.type()).toBe(expectedMessageType);
    expect(message.date()).toBeTruthy();
};
const sendToContact = async (payload, expectedMessageType, toUser) => {
    const to = toUser || toUserName;
    const toContact = await bot.Contact.find({ id: to });
    const message = (await toContact.say(payload));
    await expectSendMessage(message, expectedMessageType);
    return message;
};
const sendToRoom = async (payload, expectedMessageType, toRoomId, ...mentionList) => {
    const to = toRoomId || toChatRoomId;
    const toRoom = await bot.Room.find({ id: to });
    const message = (await toRoom.say(payload, ...mentionList));
    await expectSendMessage(message, expectedMessageType);
    return message;
};
describe("message", () => {
    const sendMessage = async (payload, expectedMessageType) => {
        const message1 = await sendToContact(payload, expectedMessageType);
        const message2 = await sendToRoom(payload, expectedMessageType);
        return [message1, message2];
    };
    const recallMessages = async (messageList) => {
        await new Promise((resolve) => setTimeout(resolve, 1000));
        await messageList[0].recall();
        await new Promise((resolve) => setTimeout(resolve, 1000));
        await messageList[1].recall();
    };
    test("send text message", async () => {
        const text = `hello padlocal: ${Date.now()}`;
        await sendMessage(text, PUPPET.types.Message.Text);
    });
    test("send text message with at user list", async () => {
        const atUserList = config_1.default.get("test.message.send.chatroomAtUserList");
        const text = `hello padlocal: ${Date.now()}`;
        const contactList = [];
        for (const contactId of atUserList) {
            const contact = await bot.Contact.find({ id: contactId });
            contactList.push(contact);
        }
        await sendToRoom(text, PUPPET.types.Message.Text, undefined, ...contactList);
    });
    test("recall text message", async () => {
        const messageList = await sendMessage(`hi: ${Date.now()}`, PUPPET.types.Message.Text);
        await recallMessages(messageList);
    });
    const sendContactCardMessage = async () => {
        const contactCardId = config_1.default.get("test.message.send.contactCardId");
        const contact = (await bot.Contact.find({ id: contactCardId }));
        return sendMessage(contact, PUPPET.types.Message.Text);
    };
    test("send contact card message", async () => {
        await sendContactCardMessage();
    });
    test("recall contact card message", async () => {
        const messageList = await sendContactCardMessage();
        await recallMessages(messageList);
    });
    const sendImageMessage = async () => {
        const imageFilePath = config_1.default.get("test.message.send.imageFilePath");
        const fileBox = file_box_1.FileBox.fromFile(imageFilePath);
        return sendMessage(fileBox, PUPPET.types.Message.Text);
    };
    test("send image message", async () => {
        await sendImageMessage();
    });
    test("recall image message", async () => {
        const messageList = await sendImageMessage();
        await recallMessages(messageList);
    });
    const sendVoiceMessage = async () => {
        const voiceFilePath = config_1.default.get("test.message.send.voiceFilePath");
        const voiceLength = config_1.default.get("test.message.send.voiceLength");
        const fileBox = file_box_1.FileBox.fromFile(voiceFilePath);
        fileBox.mimeType = "audio/silk";
        fileBox.metadata = {
            voiceLength,
        };
        return sendMessage(fileBox, PUPPET.types.Message.Text);
    };
    test("send voice message", async () => {
        await sendVoiceMessage();
    }, 20000);
    test("recall voice message", async () => {
        const messageList = await sendVoiceMessage();
        await recallMessages(messageList);
    }, 20000);
    const sendVideoMessage = async () => {
        const videoFilePath = config_1.default.get("test.message.send.videoFilePath");
        const fileBox = file_box_1.FileBox.fromFile(videoFilePath);
        return sendMessage(fileBox, PUPPET.types.Message.Text);
    };
    test("send video message", async () => {
        await sendVideoMessage();
    }, 20000);
    test("recall video message", async () => {
        const messageList = await sendVideoMessage();
        await recallMessages(messageList);
    }, 20000);
    const sendFileMessage = async () => {
        const fileFilePath = config_1.default.get("test.message.send.fileFilePath");
        const fileBox = file_box_1.FileBox.fromFile(fileFilePath);
        return sendMessage(fileBox, PUPPET.types.Message.Text);
    };
    test("send file message", async () => {
        await sendFileMessage();
    }, 300000);
    test("recall file message", async () => {
        const messageList = await sendFileMessage();
        await recallMessages(messageList);
    }, 20000);
    const sendLinkMessage = async () => {
        const title = config_1.default.get("test.message.send.link.title");
        const description = config_1.default.get("test.message.send.link.description");
        const url = config_1.default.get("test.message.send.link.url");
        const thumbImageUrl = config_1.default.get("test.message.send.link.thumbImageUrl");
        const urlLink = new wechaty_1.impls.UrlLinkImpl({
            description,
            thumbnailUrl: thumbImageUrl,
            title,
            url,
        });
        return sendMessage(urlLink, PUPPET.types.Message.Url);
    };
    test("send link message", async () => {
        await sendLinkMessage();
    });
    test("recall link message", async () => {
        const messageList = await sendLinkMessage();
        await recallMessages(messageList);
    }, 10000);
    const sendMiniProgramMessageThumbCdn = async () => {
        const miniProgramPayload = config_1.default.get("test.message.send.miniProgram");
        const miniProgram = new wechaty_1.impls.MiniProgramImpl(miniProgramPayload);
        return sendMessage(miniProgram, PUPPET.types.Message.MiniProgram);
    };
    const sendMiniProgramMessageThumbHttp = async () => {
        const miniProgramPayload = Object.assign({}, config_1.default.get("test.message.send.miniProgram"));
        miniProgramPayload.thumbUrl = config_1.default.get("test.message.send.miniProgramThumbURLHttp");
        miniProgramPayload.thumbKey = undefined;
        const miniProgram = new wechaty_1.impls.MiniProgramImpl(miniProgramPayload);
        return sendMessage(miniProgram, PUPPET.types.Message.MiniProgram);
    };
    test("send miniprogram message", async () => {
        await sendMiniProgramMessageThumbCdn();
        await sendMiniProgramMessageThumbHttp();
    }, 30 * 1000);
    test("recall miniprogram message", async () => {
        const messageList = await sendMiniProgramMessageThumbCdn();
        await recallMessages(messageList);
    });
    const sendEmojiMessage = async () => {
        const emotionPayload = config_1.default.get("test.message.send.emoji");
        const emoticonBox = file_box_1.FileBox.fromUrl(emotionPayload.cdnurl, "message-test-emotion.jpg", {
            ...emotionPayload,
        });
        emoticonBox.mimeType = "emoticon";
        return sendMessage(emoticonBox, PUPPET.types.Message.Emoticon);
    };
    test("send emoticon message", async () => {
        await sendEmojiMessage();
    });
    test("recall emoticon message", async () => {
        const messageList = await sendEmojiMessage();
        await recallMessages(messageList);
    });
});
describe("room", () => {
    const chatroomId = config_1.default.get("test.room.chatroomId");
    test("create room", async () => {
        const memberList = config_1.default.get("test.room.create.memberUserNameList");
        const roomName = config_1.default.get("test.room.create.roomName");
        const contactList = [];
        for (const userName of memberList) {
            const contact = await bot.Contact.find({ id: userName });
            contactList.push(contact);
        }
        const newRoom = await bot.Room.create(contactList, roomName);
        expect(newRoom).toBeTruthy();
        await new Promise((resolve) => setTimeout(resolve, 1000));
        // await newRoom.ready();
        const newRoomTopic = await newRoom.topic();
        expect(newRoomTopic).toEqual(roomName);
        const newRoomMemberList = await newRoom.memberAll();
        expect(newRoomMemberList.length).toEqual(3);
        await sendToRoom("hello", PUPPET.types.Message.Text, newRoom.id);
    });
    test("room member list", async () => {
        const room = (await bot.Room.find({ id: chatroomId }));
        const memberList = await room.memberAll();
        console.info(memberList);
        expect(memberList).toBeTruthy();
        expect(memberList.length).toBeGreaterThan(0);
    });
    test("room delete member", async () => {
        const memberUserName = config_1.default.get("test.room.delete.memberUserName");
        const room = (await bot.Room.find({ id: chatroomId }));
        const contact = await bot.Contact.find({ id: memberUserName });
        const oldMemberList = await room.memberAll();
        await room.remove(contact);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const newMemberList = await room.memberAll();
        expect(newMemberList.length).toEqual(oldMemberList.length - 1);
    });
    test("room add member", async () => {
        const room = (await bot.Room.find({ id: chatroomId }));
        const userName = config_1.default.get("test.room.add.memberUserName");
        const contact = await bot.Contact.find({ id: userName });
        const oldMemberList = await room.memberAll();
        await room.add(contact);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const newMemberList = await room.memberAll();
        expect(newMemberList.length).toEqual(oldMemberList.length + 1);
    });
    test("room avatar", async () => {
        const room = await bot.Room.find({ id: chatroomId });
        const avatarFileBox = await room.avatar();
        expect(avatarFileBox).toBeTruthy();
    });
    test("get room list", async () => {
        const allRooms = await bot.Room.findAll();
        expect(allRooms.length).toBeGreaterThan(0);
    });
    test("room qr", async () => {
        const room = (await bot.Room.find({ id: chatroomId }));
        const qrString = await room.qrCode();
        console.info(`qr: ${qrString}`);
        expect(qrString).toBeTruthy();
    });
    test("room topic", async () => {
        const room = (await bot.Room.find({ id: chatroomId }));
        const toName = config_1.default.get("test.room.topic.changeName");
        await room.topic(toName);
        await new Promise((resolve) => setTimeout(resolve, 1000));
        const newTopic = await room.topic();
        expect(newTopic).toEqual(toName);
    });
    test("room announce", async () => {
        const room = (await bot.Room.find({ id: chatroomId }));
        const newAnnouncement = config_1.default.get("test.room.announce.newAnnouncement");
        await room.announce(newAnnouncement);
        const announcement = await room.announce();
        expect(announcement).toEqual(newAnnouncement);
    });
    test("room quit", async () => {
        const roomId = config_1.default.get("test.room.quit.id");
        const room = (await bot.Room.find({ id: roomId }));
        await room.quit();
    });
    test("accept room invitation", async () => {
        const roomInvitationId = config_1.default.get("test.room.invitation.id");
        const roomInvitation = bot.RoomInvitation.load(roomInvitationId);
        await roomInvitation.accept();
    });
});
//# sourceMappingURL=wechaty-api.test.js.map