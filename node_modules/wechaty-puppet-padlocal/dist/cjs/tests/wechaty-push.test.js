"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = __importDefault(require("config"));
const wechaty_1 = require("wechaty");
const wechaty_common_js_1 = require("./wechaty-common.js");
const is_type_js_1 = require("../src/padlocal/utils/is-type.js");
const PUPPET = __importStar(require("wechaty-puppet"));
const LOGPRE = "TestBot";
test("push", async () => {
    const forwardFrom = config_1.default.get("test.push.forwardFrom");
    const forwardTo = config_1.default.get("test.push.forwardTo");
    const recallUserId = config_1.default.get("test.push.recallUserId");
    const getMessagePayload = async (message) => {
        switch (message.type()) {
            case PUPPET.types.Message.Text:
                if (message.talker().id === recallUserId && message.text().indexOf("recall") !== -1) {
                    await message.recall();
                }
                break;
            case PUPPET.types.Message.Attachment:
            case PUPPET.types.Message.Audio: {
                const attachFile = await message.toFileBox();
                expect(attachFile).toBeTruthy();
                const dataBuffer = await attachFile.toBuffer();
                expect(dataBuffer.length).toBeGreaterThan(0);
                wechaty_1.log.info(LOGPRE, `get message audio or attach: ${dataBuffer.length}`);
                break;
            }
            case PUPPET.types.Message.Video: {
                const videoFile = await message.toFileBox();
                expect(videoFile).toBeTruthy();
                const videoData = await videoFile.toBuffer();
                expect(videoData.length).toBeGreaterThan(0);
                wechaty_1.log.info(LOGPRE, `get message video: ${videoData.length}`);
                break;
            }
            case PUPPET.types.Message.Emoticon: {
                const emotionFile = await message.toFileBox();
                expect(emotionFile).toBeTruthy();
                const emotionJSON = emotionFile.toJSON();
                expect(emotionJSON.remoteUrl.length).toBeGreaterThan(0);
                const emotionBuffer = await emotionFile.toBuffer();
                expect(emotionBuffer.length).toBeTruthy();
                wechaty_1.log.info(LOGPRE, `get message emotion: ${emotionBuffer.length}`);
                break;
            }
            case PUPPET.types.Message.Image: {
                const messageImage = await message.toImage();
                expect(messageImage).toBeTruthy();
                const thumbImage = await messageImage.thumbnail();
                expect(thumbImage).toBeTruthy();
                const thumbImageData = await thumbImage.toBuffer();
                expect(thumbImageData.length).toBeTruthy();
                wechaty_1.log.info(LOGPRE, `get message image, thumb: ${thumbImageData.length}`);
                const artworkImage = await messageImage.artwork();
                expect(artworkImage).toBeTruthy();
                const artworkImageData = await artworkImage.toBuffer();
                expect(artworkImageData.length).toBeTruthy();
                wechaty_1.log.info(LOGPRE, `get message image, artwork: ${artworkImageData.length}`);
                const hdImage = await messageImage.hd();
                expect(hdImage).toBeTruthy();
                const hdImageData = await hdImage.toBuffer();
                expect(hdImageData.length).toBeTruthy();
                wechaty_1.log.info(LOGPRE, `get message image, hd: ${hdImageData.length}`);
                break;
            }
            case PUPPET.types.Message.Url: {
                const urlLink = await message.toUrlLink();
                expect(urlLink).toBeTruthy();
                expect(urlLink.title()).toBeTruthy();
                expect(urlLink.url()).toBeTruthy();
                const urlThumbImage = await message.toFileBox();
                expect(urlThumbImage).toBeTruthy();
                const urlThumbImageData = await urlThumbImage.toBuffer();
                expect(urlThumbImageData.length).toBeTruthy();
                wechaty_1.log.info(LOGPRE, `get message url thumb: ${urlThumbImageData.length}`);
                break;
            }
            case PUPPET.types.Message.MiniProgram: {
                const miniProgram = await message.toMiniProgram();
                wechaty_1.log.info(`MiniProgramPayload: ${JSON.stringify(miniProgram)}`);
                expect(miniProgram).toBeTruthy();
                expect(miniProgram.appid()?.length).toBeGreaterThan(0);
                expect(miniProgram.description()?.length).toBeGreaterThan(0);
                expect(miniProgram.pagePath()?.length).toBeGreaterThan(0);
                // expect(miniProgram.iconUrl?.length).toBeGreaterThan(0);
                expect(miniProgram.thumbUrl()?.length).toBeGreaterThan(0);
                expect(miniProgram.title()?.length).toBeGreaterThan(0);
                expect(miniProgram.username()?.length).toBeGreaterThan(0);
                expect(miniProgram.thumbKey()?.length).toBeGreaterThan(0);
                break;
            }
        }
    };
    const forwardMessage = async (bot, message) => {
        if (message.type() === PUPPET.types.Message.Unknown) {
            return;
        }
        try {
            let to;
            if ((0, is_type_js_1.isContactId)(forwardTo)) {
                to = await bot.Contact.find({ id: forwardTo });
            }
            else {
                to = await bot.Room.find({ id: forwardTo });
            }
            const newMessage = await message.forward(to);
            await getMessagePayload(newMessage);
        }
        catch (e) {
            wechaty_1.log.error(LOGPRE, `Error while forwarding message: ${e.stack}`);
        }
    };
    await (0, wechaty_common_js_1.prepareSingedOnBot)(async (bot) => {
        bot.on("message", async (message) => {
            wechaty_1.log.info(LOGPRE, `on message: ${message.toString()}`);
            if (message.talker().id === forwardFrom && message.listener()?.id === forwardFrom) {
                await forwardMessage(bot, message);
            }
            await getMessagePayload(message);
        });
        bot.on("friendship", async (friendship) => {
            wechaty_1.log.info(LOGPRE, `on friendship: ${friendship.toJSON()}`);
            if (friendship.type() === PUPPET.types.Friendship.Receive) {
                try {
                    wechaty_1.log.info(LOGPRE, `receive friendship: ${friendship.toJSON()}`);
                    await friendship.accept();
                    wechaty_1.log.info(LOGPRE, "accept success");
                }
                catch (e) {
                    wechaty_1.log.error(LOGPRE, `accept failed: ${e.stack}`);
                }
            }
        });
        bot.on("room-invite", async (roomInvite) => {
            wechaty_1.log.info(LOGPRE, `on room invite: ${await roomInvite.toJSON()}`);
            await roomInvite.accept();
        });
        bot.on("room-join", async (room, inviteeList, inviter, date) => {
            wechaty_1.log.info(LOGPRE, `on room join: ${room.toString()}, inviteeList: ${inviteeList.map((i) => i.id)}, inviter: ${inviter.id}, ${date}`);
        });
        bot.on("room-leave", async (room, leaverList, remover, date) => {
            wechaty_1.log.info(LOGPRE, `on room leave: ${room.toString()}, leaverList: ${leaverList.map((l) => l.id)}, remover: ${remover?.id} ${date}`);
        });
        bot.on("room-topic", async (room, newTopic, oldTopic, changer, date) => {
            wechaty_1.log.info(LOGPRE, `on room topic: ${room.toString()}, ${newTopic}, ${oldTopic}, ${changer.toString()}, ${date}`);
        });
    });
    return new Promise(() => { });
}, Math.pow(2, 30));
//# sourceMappingURL=wechaty-push.test.js.map