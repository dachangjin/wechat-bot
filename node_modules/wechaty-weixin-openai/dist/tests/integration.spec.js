#!/usr/bin/env ts-node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = require("tstest");
const plugins = __importStar(require("../src/mod"));
// import {
//   Wechaty,
// }                               from 'wechaty'
// import {
//   validatePlugin,
// }                               from 'wechaty-plugin-contrib'
// import {
//   PuppetMock,
// }                 from 'wechaty-puppet-mock'
tstest_1.test('integration testing', (t) => __awaiter(void 0, void 0, void 0, function* () {
    // const bot = Wechaty.instance({
    //   puppet: new PuppetMock(),
    // }).use(plugins.WechatyIntercom({
    //   intercomToken: 'fas',
    //   room: 'id',
    //   webhookProxyUrl: 'https://smee.io/fdasfadsfasdfs',
    // }))
    t.skip('should get a bot');
}));
tstest_1.test('plugin name', (t) => __awaiter(void 0, void 0, void 0, function* () {
    for (const plugin of Object.values(plugins)) {
        if (typeof plugin !== 'function') {
            continue;
        }
        if (plugin.name === 'validatePlugin') {
            continue; // our helper functions
        }
        t.skip('to be fixed');
        // t.doesNotThrow(() => validatePlugin(plugin), 'plugin ' + plugin.name + ' should be valid')
    }
}));
//# sourceMappingURL=integration.spec.js.map