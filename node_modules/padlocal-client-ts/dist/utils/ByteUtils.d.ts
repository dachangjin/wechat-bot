/// <reference types="node" />
export declare type Bytes = Buffer;
export declare const MAX_LOG_BYTES_LEN = 2048;
export declare function bytesToHexString(bytes: Bytes, maxLen?: number): string;
export declare function hexStringToBytes(hexString: string): Bytes;
export declare function newBytes(length?: number): Bytes;
export declare function fromBytes(bytes: Uint8Array | string): Bytes;
export declare function joinBytes(...datas: Bytes[]): Bytes;
export declare function subBytes(data: Bytes, start?: number, end?: number): Buffer;
export declare class BytesReader {
    private readonly _buffer;
    private readonly _bigEndian;
    private _cursor;
    get cursor(): number;
    constructor(buffer: Bytes, bigEndian: boolean);
    available(): number;
    readBoolean(): boolean;
    readByte(): number;
    readUByte(): number;
    readShort(): number;
    readUShort(): number;
    readInt(): number;
    readUInt(): number;
    readLong(): bigint;
    readULong(): bigint;
    readFloat(): number;
    readDouble(): number;
    readBytes(length: number): Bytes;
    reset(): void;
    skip(length: number): void;
}
