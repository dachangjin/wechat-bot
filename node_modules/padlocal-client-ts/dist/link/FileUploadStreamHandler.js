"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUploadStreamHandler = void 0;
const StreamHandler_1 = require("./StreamHandler");
const padlocal_pb_1 = require("../proto/padlocal_pb");
const SocketClient_1 = require("./SocketClient");
const ByteUtils_1 = require("../utils/ByteUtils");
const FileUnpacker_1 = require("../utils/FileUnpacker");
class FileUploadStreamHandler extends StreamHandler_1.StreamHandler {
    constructor(request, params) {
        super(request);
        this._params = params;
    }
    onRequest(weChatStreamRequest) {
        const fileUploadRequest = weChatStreamRequest.getFileuploadrequest();
        const unpacker = new FileUnpacker_1.FileUnpacker(this._params.aesKey);
        this._socketClient = new SocketClient_1.SocketClient(fileUploadRequest.getHost().getHost(), fileUploadRequest.getHost().getPort(), this._request.traceId, {
            onConnect: () => __awaiter(this, void 0, void 0, function* () {
                unpacker.reset();
            }),
            onReceive: (data) => __awaiter(this, void 0, void 0, function* () {
                const responseList = unpacker.update(data);
                if (responseList.length) {
                    const responseRequiredFieldList = fileUploadRequest.getRequireresponsefieldList();
                    const matchedResponse = responseList.find((res) => {
                        const notMatch = responseRequiredFieldList.some((f) => !res.body[f]);
                        return !notMatch;
                    });
                    if (!matchedResponse) {
                        return false;
                    }
                    const fileUploadResponse = new padlocal_pb_1.WeChatFileUploadResponse();
                    for (const key of Object.keys(matchedResponse.body)) {
                        const value = matchedResponse.body[key];
                        value && fileUploadResponse.getResponseMap().set(key, value);
                    }
                    const responseReply = yield this.sendResponse(new padlocal_pb_1.WeChatStreamResponse().setFileuploadresponse(fileUploadResponse));
                    return responseReply.getEof();
                }
                else {
                    return false;
                }
            }),
        });
        const data = this._assembleUploadPayload(fileUploadRequest.getPayload());
        this._socketClient.send(data).then();
    }
    _assembleUploadPayload(fileUploadPayload) {
        let ret = null;
        for (const fragment of fileUploadPayload.getFragmentList()) {
            let fragmentData = null;
            if (fragment.getPayloadCase() == padlocal_pb_1.FileUploadPayloadFragment.PayloadCase.BINARY) {
                fragmentData = Buffer.from(fragment.getBinary());
            }
            else if (fragment.getPayloadCase() == padlocal_pb_1.FileUploadPayloadFragment.PayloadCase.PLACEHOLDERBINARYMD5) {
                fragmentData = this._params.dataBag[fragment.getPlaceholderbinarymd5()];
            }
            if (!fragmentData) {
                throw new Error(`can not resolve fragment data: ${JSON.stringify(fragment.toObject())}`);
            }
            ret = ret ? ByteUtils_1.joinBytes(ret, fragmentData) : fragmentData;
        }
        return ret;
    }
}
exports.FileUploadStreamHandler = FileUploadStreamHandler;
//# sourceMappingURL=FileUploadStreamHandler.js.map