"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LongLinkStreamHandler = void 0;
const StreamHandler_1 = require("./StreamHandler");
const padlocal_pb_1 = require("../proto/padlocal_pb");
class LongLinkStreamHandler extends StreamHandler_1.StreamHandler {
    constructor(request, longLinkProxy) {
        super(request);
        this._longLinkProxy = longLinkProxy;
    }
    onRequest(wechatStreamRequest) {
        const longLinkId = wechatStreamRequest.getLonglinkrequest().getLonglinkid();
        if (longLinkId && longLinkId !== this._longLinkProxy.getId()) {
            throw new Error(`stream request must be sent by longlink with id:${longLinkId}, but current id is: ${this._longLinkProxy.getId()}`);
        }
        const longLinkRequest = wechatStreamRequest.getLonglinkrequest();
        const payload = Buffer.from(longLinkRequest.getPayload());
        this._longLinkProxy.sendStreamData(payload, {
            onStreamData: (streamData) => __awaiter(this, void 0, void 0, function* () {
                const responseReply = yield this.sendResponse(new padlocal_pb_1.WeChatStreamResponse().setLonglinkresponse(new padlocal_pb_1.WeChatLongLinkStreamResponse().setPayload(streamData)));
                if (responseReply.getEof()) {
                    const longLinkResponseReply = responseReply.getLonglinkresponsereply();
                    const dataToSend = Buffer.from(longLinkResponseReply.getPayload());
                    this._longLinkProxy.sendStreamData(dataToSend);
                }
                else {
                    // do nothing, continue wait for onStreamData, and send the payload to backend
                }
                return responseReply.getEof();
            }),
        });
    }
}
exports.LongLinkStreamHandler = LongLinkStreamHandler;
//# sourceMappingURL=LongLinkStreamHandler.js.map