"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamHandler = void 0;
const padlocal_pb_1 = require("../proto/padlocal_pb");
class StreamHandler {
    constructor(request) {
        this._request = request;
    }
    handleRequest(wechatStreamRequest, ack) {
        return __awaiter(this, void 0, void 0, function* () {
            this._ack = ack;
            while (true) {
                this.onRequest(wechatStreamRequest);
                if (wechatStreamRequest.getEof()) {
                    break;
                }
                const response = yield this._request.subReplyAndRequest(this._ack, new padlocal_pb_1.WeChatStreamResponse());
                wechatStreamRequest = response.payload;
                this._ack = response.ack;
            }
        });
    }
    /**
     * return true: eof
     * @param wechatStreamResponse
     */
    sendResponse(wechatStreamResponse) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this._request.subReplyAndRequest(this._ack, wechatStreamResponse);
            const wechatResponseReply = response.payload;
            if (!wechatResponseReply.getEof()) {
                this._ack = response.ack;
            }
            return wechatResponseReply;
        });
    }
}
exports.StreamHandler = StreamHandler;
//# sourceMappingURL=StreamHandler.js.map