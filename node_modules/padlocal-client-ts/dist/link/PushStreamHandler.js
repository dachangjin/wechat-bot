"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushStreamHandler = void 0;
const StreamHandler_1 = require("./StreamHandler");
const padlocal_pb_1 = require("../proto/padlocal_pb");
class PushStreamHandler extends StreamHandler_1.StreamHandler {
    constructor(request, longLinkProxy) {
        super(request);
        this._longLinkProxy = longLinkProxy;
        this._pushHandler = (pushMessageList) => __awaiter(this, void 0, void 0, function* () {
            const filteredPushPacketList = pushMessageList.filter((message) => {
                var _a;
                return ((_a = this._pushTypeList) === null || _a === void 0 ? void 0 : _a.indexOf(message.getPush().getType())) !== -1;
            });
            if (!filteredPushPacketList.length) {
                return;
            }
            const responseReply = yield this.sendResponse(new padlocal_pb_1.WeChatStreamResponse().setPushsubscriberesponse(new padlocal_pb_1.WeChatPushSubscribeResponse().setMessageList(filteredPushPacketList)));
            if (responseReply.getEof()) {
                this._longLinkProxy.removeListener("push", this._pushHandler);
            }
        });
    }
    onRequest(wechatStreamRequest) {
        const pushSubscribeRequest = wechatStreamRequest.getPushsubscriberequest();
        this._pushTypeList = pushSubscribeRequest.getPushtypeList();
        this._longLinkProxy.removeListener("push", this._pushHandler);
        this._longLinkProxy.on("push", this._pushHandler);
    }
}
exports.PushStreamHandler = PushStreamHandler;
//# sourceMappingURL=PushStreamHandler.js.map