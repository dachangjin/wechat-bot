"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IOError = exports.GrpcClient = void 0;
const crypto_random_string_1 = __importDefault(require("crypto-random-string"));
const grpc_js_1 = require("@grpc/grpc-js");
const Constant_1 = require("./utils/Constant");
const verror_1 = __importDefault(require("verror"));
const padlocal = __importStar(require("./proto/padlocal_grpc_pb"));
const version_1 = require("./version");
class GrpcClient {
    constructor(serverAddr, token, serverCA) {
        let creds;
        if (serverCA) {
            creds = grpc_js_1.credentials.createSsl(serverCA);
        }
        else {
            creds = grpc_js_1.credentials.createInsecure();
        }
        // Oops, @grpc/grpc-js does not support retry yet
        this.stub = new padlocal.PadLocalClient(serverAddr, creds, {
            "grpc.ssl_target_name_override": "client.pad-local.com",
            "grpc.default_compression_algorithm": 2,
            "grpc.default_compression_level": 2,
            "grpc.max_send_message_length": GrpcClient.MAX_REQ_RES_SIZE,
            "grpc.max_receive_message_length": GrpcClient.MAX_REQ_RES_SIZE,
        });
        this._callCredentials = grpc_js_1.credentials.createFromMetadataGenerator((params, callback) => {
            const metaData = new grpc_js_1.Metadata();
            if (token) {
                metaData.set(Constant_1.AUTHORIZATION_METADATA_KEY, `Bearer ${token}`);
            }
            callback(null, metaData);
        });
    }
    newRequestMeta(options) {
        const meta = new grpc_js_1.Metadata();
        meta.set(Constant_1.CLIENT_TYPE_METADATA_KEY, "ts");
        meta.set(Constant_1.CLIENT_VERSION_METADATA_KEY, version_1.VERSION);
        meta.set(Constant_1.TRACE_ID_METADATA_KEY, crypto_random_string_1.default({ length: 8 }));
        if (options && options.idempotentId) {
            meta.set(Constant_1.IDEMPOTENT_ID_KEY, options.idempotentId);
        }
        return meta;
    }
    newRequestOptions(options) {
        return {
            credentials: this._callCredentials,
            deadline: Date.now() + GrpcClient.getTimeout(options),
        };
    }
    static getTraceId(meta) {
        return meta.get(Constant_1.TRACE_ID_METADATA_KEY)[0];
    }
    static getTimeout(options) {
        return (options && options.requestTimeout) || GrpcClient.DEFAULT_REQUEST_TIMEOUT;
    }
}
exports.GrpcClient = GrpcClient;
GrpcClient.DEFAULT_REQUEST_TIMEOUT = 60 * 1000;
GrpcClient.MAX_REQ_RES_SIZE = 20 * 1024 * 1024;
class IOError extends verror_1.default {
}
exports.IOError = IOError;
//# sourceMappingURL=GrpcClient.js.map