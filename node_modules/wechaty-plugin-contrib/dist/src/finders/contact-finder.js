"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contactFinder = void 0;
const wechaty_1 = require("wechaty");
function contactFinder(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'contactFinder(%s)', JSON.stringify(options));
    if (!options) {
        return () => [];
    }
    if (!Array.isArray(options)) {
        options = [options];
    }
    const optionList = options;
    return function findContact(wechaty) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.silly('WechatyPluginContrib', 'contactFinder() contactFind(%s)', wechaty);
            const allContactList = [];
            for (const option of optionList) {
                if (typeof option === 'string') {
                    const contact = wechaty.Contact.load(option);
                    yield contact.ready();
                    allContactList.push(contact);
                }
                else if (option instanceof RegExp) {
                    allContactList.push(...yield wechaty.Contact.findAll({ name: option }));
                    allContactList.push(...yield wechaty.Contact.findAll({ alias: option }));
                }
                else if (option instanceof Function) {
                    allContactList.push(...yield option(wechaty));
                }
                else {
                    throw new Error('option is unknown: ' + option);
                }
            }
            const dedupedContactList = [...new Set(allContactList.filter(Boolean))];
            return dedupedContactList;
        });
    };
}
exports.contactFinder = contactFinder;
//# sourceMappingURL=contact-finder.js.map