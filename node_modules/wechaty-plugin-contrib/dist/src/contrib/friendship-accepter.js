"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FriendshipAccepter = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: Jun 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../matchers/mod");
const mod_2 = require("../talkers/mod");
function FriendshipAccepter(config = {}) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'FriendshipAccepter("%s")', JSON.stringify(config));
    const doGreeting = mod_2.contactTalker(config.greeting);
    const isMatchKeyword = config.keyword
        ? mod_1.stringMatcher(config.keyword)
        : () => true; // accept all invitations if there's no keyword set.
    return function FriendshipAccepterPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'FriendshipAccepterPlugin installing on %s ...', wechaty);
        wechaty.on('friendship', (friendship) => __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.verbose('WechatyPluginContrib', 'FriendshipAccepterPlugin wechaty.on(friendship) %s', friendship);
            const friendshipType = friendship.type();
            switch (friendshipType) {
                case wechaty_1.Friendship.Type.Receive:
                    const hello = friendship.hello();
                    if (yield isMatchKeyword(hello)) {
                        yield friendship.accept();
                    }
                    break;
                case wechaty_1.Friendship.Type.Confirm:
                    const contact = friendship.contact();
                    yield doGreeting(contact);
                    break;
                case wechaty_1.Friendship.Type.Verify:
                    // This is for when we send a message to others, but they did not accept us as a friend.
                    break;
                default:
                    throw new Error('friendshipType unknown: ' + friendshipType);
            }
        }));
    };
}
exports.FriendshipAccepter = FriendshipAccepter;
//# sourceMappingURL=friendship-accepter.js.map