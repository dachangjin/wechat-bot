"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatOps = exports.isMatchConfig = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: May 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../matchers/mod");
const DEFAULT_CONFIG = {
    at: true,
    dm: true,
};
exports.isMatchConfig = (config) => {
    wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps isMatchConfig(%s)', JSON.stringify(config));
    const normalizedConfig = Object.assign(Object.assign({}, DEFAULT_CONFIG), config);
    const matchWhitelist = normalizedConfig.whitelist ? mod_1.messageMatcher(normalizedConfig.whitelist) : () => false;
    const matchBlacklist = normalizedConfig.blacklist ? mod_1.messageMatcher(normalizedConfig.blacklist) : () => false;
    return function isMatch(message) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps isMatchConfig(%s) isMatch(%s)', JSON.stringify(config), message.toString());
            if (message.self()) {
                return false;
            }
            if (yield matchWhitelist(message)) {
                return true;
            }
            if (yield matchBlacklist(message)) {
                return false;
            }
            if (normalizedConfig.dm) {
                if (!message.room()) {
                    wechaty_1.log.silly('WechatyPluginContrib', 'ChatOps isMatchConfig: match [dm]');
                    return true;
                }
            }
            if (normalizedConfig.at) {
                if (message.room() && (yield message.mentionSelf())) {
                    wechaty_1.log.silly('WechatyPluginContrib', 'ChatOps isMatchConfig: match [at]');
                    return true;
                }
            }
            return false;
        });
    };
};
function ChatOps(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps(%s)', typeof config === 'undefined' ? ''
        : typeof config === 'function' ? 'function'
            : JSON.stringify(config));
    const isMatch = exports.isMatchConfig(config);
    return function ChatOpsPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'ChatOps installing on %s ...', wechaty);
        let chatopsRoom;
        wechaty.on('message', (message) => __awaiter(this, void 0, void 0, function* () {
            if (!chatopsRoom) {
                chatopsRoom = wechaty.Room.load(config.room);
                try {
                    yield chatopsRoom.ready();
                }
                catch (e) {
                    wechaty_1.log.error('WechatyPluginContrib', 'ChatOps() ChatOpsPlugin(%s) chatopsRoom.ready() rejection: %s', wechaty, e);
                }
            }
            if (yield isMatch(message)) {
                try {
                    yield chatopsRoom.say(message.toString());
                }
                catch (e) {
                    wechaty_1.log.error('WechatyPluginContrib', 'ChatOps() ChatOpsPlugin(%s) rejection: %s', wechaty, e);
                }
            }
        }));
    };
}
exports.ChatOps = ChatOps;
//# sourceMappingURL=chatops.js.map