#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = __importDefault(require("tstest"));
const sinon_1 = __importDefault(require("sinon"));
const wechaty_1 = require("wechaty");
const wechaty_puppet_mock_1 = require("wechaty-puppet-mock");
const ding_dong_1 = require("./ding-dong");
function wechatyFixtures() {
    return __asyncGenerator(this, arguments, function* wechatyFixtures_1() {
        const sandbox = sinon_1.default.createSandbox();
        const wechaty = new wechaty_1.Wechaty({ puppet: new wechaty_puppet_mock_1.PuppetMock() });
        yield __await(wechaty.start());
        const message = wechaty.Message.load('mock_message_id');
        const room = wechaty.Room.load('mock_room_id');
        sandbox.stub(message, 'toString').returns('MockMessage');
        const messageSelfStub = sandbox.stub(message, 'self').returns(false);
        yield yield __await({
            message,
            messageSelfStub,
            room,
            sandbox,
            wechaty,
        });
        sandbox.restore();
        yield __await(wechaty.stop());
    });
}
tstest_1.default('isMatchConfig {at: true}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_1, _a;
    try {
        for (var _b = __asyncValues(wechatyFixtures()), _c; _c = yield _b.next(), !_c.done;) {
            const { message, room, sandbox, } = _c.value;
            const CONFIG = {
                at: true,
                room: false,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            sandbox.stub(message, 'room').returns(room);
            const messageMentionSelf = sandbox.stub(message, 'mentionSelf').returns(Promise.resolve(true));
            let result = yield isMatch(message);
            t.equal(result, true, 'should match for room mention self message');
            messageMentionSelf.returns(Promise.resolve(false));
            result = yield isMatch(message);
            t.equal(result, false, 'should not match for room non-mention-self message');
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}));
tstest_1.default('isMatchConfig {at: false}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_2, _d;
    try {
        for (var _e = __asyncValues(wechatyFixtures()), _f; _f = yield _e.next(), !_f.done;) {
            const { message, room, } = _f.value;
            const CONFIG = {
                at: false,
                room: true,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            const sandbox = sinon_1.default.createSandbox();
            sandbox.stub(message, 'room').returns(room);
            const messageMentionSelf = sandbox.stub(message, 'mentionSelf').returns(Promise.resolve(true));
            let result = yield isMatch(message);
            t.equal(result, true, 'should match for room mention self message');
            messageMentionSelf.returns(Promise.resolve(false));
            result = yield isMatch(message);
            t.equal(result, true, 'should match for room non-mention-self message');
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_d = _e.return)) yield _d.call(_e);
        }
        finally { if (e_2) throw e_2.error; }
    }
}));
tstest_1.default('isMatchConfig {room: true}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_3, _g;
    try {
        for (var _h = __asyncValues(wechatyFixtures()), _j; _j = yield _h.next(), !_j.done;) {
            const { message, room, } = _j.value;
            const CONFIG = {
                dm: false,
                room: true,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            const sandbox = sinon_1.default.createSandbox();
            const messageRoom = sandbox.stub(message, 'room').returns(room);
            let result = yield isMatch(message);
            t.equal(result, true, 'should match for room message');
            messageRoom.returns(null);
            result = yield isMatch(message);
            t.equal(result, false, 'should not match for non-room message');
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_g = _h.return)) yield _g.call(_h);
        }
        finally { if (e_3) throw e_3.error; }
    }
}));
tstest_1.default('isMatchConfig {room: false}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_4, _k;
    try {
        for (var _l = __asyncValues(wechatyFixtures()), _m; _m = yield _l.next(), !_m.done;) {
            const { message, room, } = _m.value;
            const CONFIG = {
                room: false,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            const sandbox = sinon_1.default.createSandbox();
            sandbox.stub(message, 'mentionSelf').returns(Promise.resolve(false));
            const messageRoom = sandbox.stub(message, 'room').returns(room);
            let result = yield isMatch(message);
            t.equal(result, false, 'should not match for room message');
            messageRoom.returns(null);
            result = yield isMatch(message);
            t.equal(result, true, 'should match for non-room message');
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_m && !_m.done && (_k = _l.return)) yield _k.call(_l);
        }
        finally { if (e_4) throw e_4.error; }
    }
}));
tstest_1.default('isMatchConfig {dm: true}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_5, _o;
    try {
        for (var _p = __asyncValues(wechatyFixtures()), _q; _q = yield _p.next(), !_q.done;) {
            const { message, room, } = _q.value;
            const CONFIG = {
                dm: true,
                room: false,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            const sandbox = sinon_1.default.createSandbox();
            const messageRoom = sandbox.stub(message, 'room').returns(null);
            let result = yield isMatch(message);
            t.equal(result, true, 'should match for direct message');
            sandbox.stub(message, 'mentionSelf').returns(Promise.resolve(true));
            messageRoom.returns(room);
            result = yield isMatch(message);
            t.equal(result, true, 'should not match for room message');
        }
    }
    catch (e_5_1) { e_5 = { error: e_5_1 }; }
    finally {
        try {
            if (_q && !_q.done && (_o = _p.return)) yield _o.call(_p);
        }
        finally { if (e_5) throw e_5.error; }
    }
}));
tstest_1.default('isMatchConfig {dm: false}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_6, _r;
    try {
        for (var _s = __asyncValues(wechatyFixtures()), _t; _t = yield _s.next(), !_t.done;) {
            const { message, room, } = _t.value;
            const CONFIG = {
                dm: false,
                room: true,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            const sandbox = sinon_1.default.createSandbox();
            const messageRoom = sandbox.stub(message, 'room').returns(null);
            let result = yield isMatch(message);
            t.equal(result, false, 'should not match for direct message');
            messageRoom.returns(room);
            result = yield isMatch(message);
            t.equal(result, true, 'should match for room message');
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (_t && !_t.done && (_r = _s.return)) yield _r.call(_s);
        }
        finally { if (e_6) throw e_6.error; }
    }
}));
tstest_1.default('isMatchConfig {self: false}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_7, _u;
    try {
        for (var _v = __asyncValues(wechatyFixtures()), _w; _w = yield _v.next(), !_w.done;) {
            const { message, messageSelfStub, room, sandbox, } = _w.value;
            const CONFIG = {
                self: false,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            /**
             * Direct Message
             */
            const messageRoom = sandbox.stub(message, 'room').returns(null);
            messageSelfStub.returns(true);
            let result = yield isMatch(message);
            t.equal(result, false, 'should not match for self direct message with self:false');
            messageSelfStub.returns(false);
            result = yield isMatch(message);
            t.equal(result, true, 'should not match for non-self direct message with self:false');
            /**
             * Room Message
             */
            messageRoom.returns(room);
            messageSelfStub.returns(true);
            result = yield isMatch(message);
            t.equal(result, false, 'should not match for self room message with self:false');
            messageSelfStub.returns(false);
            result = yield isMatch(message);
            t.equal(result, true, 'should not match for non-self room message with self:false');
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (_w && !_w.done && (_u = _v.return)) yield _u.call(_v);
        }
        finally { if (e_7) throw e_7.error; }
    }
}));
tstest_1.default('isMatchConfig {self: true}', (t) => __awaiter(void 0, void 0, void 0, function* () {
    var e_8, _x;
    try {
        for (var _y = __asyncValues(wechatyFixtures()), _z; _z = yield _y.next(), !_z.done;) {
            const { message, messageSelfStub, room, sandbox, } = _z.value;
            const CONFIG = {
                self: true,
            };
            const isMatch = ding_dong_1.isMatchConfig(CONFIG);
            messageSelfStub.returns(true);
            const messageRoom = sandbox.stub(message, 'room').returns(null);
            let result = yield isMatch(message);
            t.equal(result, true, 'should not match for self direct message with self:false');
            messageRoom.returns(room);
            result = yield isMatch(message);
            t.equal(result, true, 'should not match for self room message with self:false');
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_z && !_z.done && (_x = _y.return)) yield _x.call(_y);
        }
        finally { if (e_8) throw e_8.error; }
    }
}));
//# sourceMappingURL=ding-dong.spec.js.map