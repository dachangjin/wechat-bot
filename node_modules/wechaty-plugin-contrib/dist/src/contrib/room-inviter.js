"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoomInviter = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: Jun 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../talkers/mod");
const mod_2 = require("../matchers/mod");
const mod_3 = require("../finders/mod");
function RoomInviter(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviter("%s")', JSON.stringify(config));
    const isMatchPassword = mod_2.stringMatcher(config.password);
    const showRule = mod_1.contactTalker(config.rule);
    const getRoomList = mod_3.roomFinder(config.room);
    const warnRepeat = mod_1.contactTalker(config.repeat);
    const doWelcome = mod_1.roomTalker(config.welcome);
    return function RoomInviterPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviter installing on %s ...', wechaty);
        const welcomeId = {};
        wechaty.on('room-join', (room, inviteeList, inviter) => __awaiter(this, void 0, void 0, function* () {
            if (inviter.id !== wechaty.self().id) {
                return;
            }
            if (!(room.id in welcomeId)) {
                return;
            }
            for (const contact of inviteeList) {
                if (contact.id in welcomeId[room.id]) {
                    yield room.wechaty.sleep(1000);
                    yield doWelcome(room, contact);
                    delete welcomeId[room.id][contact.id];
                }
            }
        }));
        wechaty.on('message', (message) => __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin wechaty.on(message) %s', message);
            if (message.room() || message.self()) {
                return;
            }
            if (message.type() !== wechaty.Message.Type.Text) {
                return;
            }
            if (!(yield isMatchPassword(message.text()))) {
                return;
            }
            const contact = message.from();
            if (!contact) {
                return;
            }
            yield showRule(contact);
            yield wechaty.sleep(1000);
            const roomList = yield getRoomList(wechaty);
            if (roomList.length <= 0) {
                wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin wechaty.on(message) getRoomList() empty');
                return;
            }
            const targetRoom = yield selectRoomWithLeastMembers(roomList);
            wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin inviting %s to %s', contact, targetRoom);
            if (yield targetRoom.has(contact)) {
                wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin %s has already in %s', contact, targetRoom);
                yield warnRepeat(contact, targetRoom);
            }
            /**
              * Set to trigger the welcome message
              */
            welcomeId[targetRoom.id] = Object.assign(Object.assign({}, welcomeId[targetRoom.id]), { [contact.id]: true });
            yield targetRoom.add(contact);
            yield wechaty.sleep(1000);
        }));
    };
}
exports.RoomInviter = RoomInviter;
function selectRoomWithLeastMembers(roomList) {
    return __awaiter(this, void 0, void 0, function* () {
        wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin selectRoomWithLeastMembers(roomList.length=%s)', roomList.length);
        if (roomList.length <= 0) {
            throw new Error('roomList is empty');
        }
        const roomMemberNumList = yield Promise.all(roomList.map(room => room.memberAll()
            .then(list => list.length)));
        let info = '';
        for (let i = 0; i < roomList.length; i++) {
            const topic = yield roomList[i].topic();
            const num = roomMemberNumList[i];
            info += `${topic}(${num}),`;
        }
        wechaty_1.log.verbose('WechatyPluginContrib', 'RoomInviterPlugin selectRoomWithLeastMembers() %s', info);
        const minNum = Math.min(...roomMemberNumList);
        const minIdx = roomMemberNumList.indexOf(minNum);
        return roomList[minIdx];
    });
}
//# sourceMappingURL=room-inviter.js.map