"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventHotHandler = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: Jun 2020
 */
const wechaty_1 = require("wechaty");
const hot_import_1 = require("hot-import");
function EventHotHandler(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'EventHotHandler("%s")', JSON.stringify(config));
    const absolutePathConfig = {};
    for (const key of Object.keys(config)) {
        const eventName = key;
        const modulePath = config[eventName];
        if (modulePath) {
            const absoluteFilename = hot_import_1.callerResolve(modulePath, __filename);
            absolutePathConfig[eventName] = absoluteFilename;
        }
    }
    return function EventHotHandlerPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'EventHotHandler installing on %s ...', wechaty);
        for (const key of Object.keys(absolutePathConfig)) {
            const eventName = key;
            const absoluteFilename = absolutePathConfig[eventName];
            if (absoluteFilename) {
                addEventHandler(wechaty, eventName, absoluteFilename).catch(e => wechaty_1.log.error('WechatyPluginContrib', 'EventHotHandler EventHotHandlerPlugin(%s, %s, %s) rejection: %s', wechaty, eventName, absoluteFilename, e));
            }
        }
    };
}
exports.EventHotHandler = EventHotHandler;
function addEventHandler(wechaty, eventName, absoluteFilename) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const eventHandler = yield hot_import_1.hotImport(absoluteFilename);
            wechaty.on(eventName, (...args) => {
                try {
                    return eventHandler.apply(wechaty, args);
                }
                catch (e) {
                    wechaty_1.log.error('WechatyPluginContrib', 'EventHotHandler EventHotHandlerPlugin(%s) listener(%s) exception%s', wechaty, eventName, e);
                    wechaty.emit('error', e);
                }
            });
        }
        catch (e) {
            wechaty_1.log.error('WechatyPluginContrib', 'EventHotHandler EventHotHandlerPlugin() eventName(%s) hotImport(%s) rejection: %s', eventName, absoluteFilename, e);
            wechaty.emit('error', e);
        }
    });
}
//# sourceMappingURL=event-hot-handler.js.map