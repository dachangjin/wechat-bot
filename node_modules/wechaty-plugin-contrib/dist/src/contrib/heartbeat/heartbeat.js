"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Heartbeat = void 0;
const config_1 = require("../../config");
const mod_1 = require("../../finders/mod");
const options_1 = require("./options");
const say_emoji_1 = require("./say-emoji");
function heart() {
    let timer;
    const cleanTimer = () => {
        if (timer) {
            config_1.log.silly('WechatyPluginContrib', 'Heartbeat heart() cleanTimer() cleaning previous timer');
            clearInterval(timer);
            timer = undefined;
        }
    };
    return (talkerList, config) => {
        var _a;
        config_1.log.verbose('WechatyPluginContrib', 'Heartbeat heart()...');
        const emojiHeartbeatOption = (_a = config.emoji) === null || _a === void 0 ? void 0 : _a.heartbeat;
        if (!emojiHeartbeatOption) {
            config_1.log.silly('WechatyPluginContrib', 'Heartbeat heart() no emoji heartbeat option');
            return cleanTimer;
        }
        cleanTimer();
        timer = setInterval(say_emoji_1.sayEmoji('heartbeat', talkerList, emojiHeartbeatOption), config.intervalSeconds * 1000);
        config_1.log.silly('WechatyPluginContrib', 'Heartbeat heart() new timer set');
        return cleanTimer;
    };
}
function Heartbeat(config) {
    config_1.log.verbose('WechatyPluginContrib', 'Heartbeat("%s")', JSON.stringify(config));
    const normalizedConfig = options_1.buildConfig(config);
    const heartbeat = heart();
    const getContactList = mod_1.contactFinder(normalizedConfig.contact);
    const getRoomList = mod_1.roomFinder(normalizedConfig.room);
    return function HeartbeatPlugin(wechaty) {
        config_1.log.verbose('WechatyPluginContrib', 'Heartbeat installing on %s ...', wechaty);
        let talkerList = [];
        wechaty.on('login', () => __awaiter(this, void 0, void 0, function* () {
            config_1.log.verbose('WechatyPluginContrib', 'Heartbeat wechaty.on(login)');
            talkerList = [
                ...yield getContactList(wechaty),
                ...yield getRoomList(wechaty),
            ];
            config_1.log.verbose('WechatyPluginContrib', 'Heartbeat talkerList numbers: %s', talkerList.length);
            const cleanTimer = heartbeat(talkerList, normalizedConfig);
            wechaty.once('logout', cleanTimer);
            /**
             * Login Heartbeat
             */
            if (normalizedConfig.emoji.login) {
                const emojiLoginOption = normalizedConfig.emoji.login;
                yield say_emoji_1.sayEmoji('login', talkerList, emojiLoginOption)();
            }
        }));
        if (normalizedConfig.emoji.ready) {
            config_1.log.verbose('WechatyPluginContrib', 'Heartbeat setting `ready` event');
            const emojiOption = normalizedConfig.emoji.ready;
            wechaty.on('ready', say_emoji_1.sayEmoji('ready', talkerList, emojiOption));
        }
        if (normalizedConfig.emoji.logout) {
            config_1.log.verbose('WechatyPluginContrib', 'Heartbeat setting `logout` event');
            /**
             * Fail gracefully
             *  the `logout` event might received after the bot logout,
             *  for example, the bot was kicked offline by the user.
             *
             * So it might not be able to `say` anymore.
             */
            const emojiOption = normalizedConfig.emoji.logout;
            wechaty.on('logout', say_emoji_1.sayEmoji('logout', talkerList, emojiOption));
        }
    };
}
exports.Heartbeat = Heartbeat;
//# sourceMappingURL=heartbeat.js.map