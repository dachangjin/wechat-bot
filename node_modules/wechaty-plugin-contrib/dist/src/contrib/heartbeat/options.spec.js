#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = __importDefault(require("tstest"));
const options_1 = require("./options");
tstest_1.default('buildConfig()', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const EXPECTED_CONFIG = {
        contact: 'filehelper',
        emoji: {
            heartbeat: '[爱心]',
        },
        intervalSeconds: 3600,
    };
    const result = options_1.buildConfig();
    t.deepEqual(result, EXPECTED_CONFIG, 'should get default config');
}));
tstest_1.default('buildConfig(config)', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const CONFIG = {
        emoji: {
            heartbeat: '[爱心]',
            login: '[太阳]',
            logout: '[月亮]',
            ready: '[拳头]',
        },
        intervalSeconds: 60,
        room: 'test@chatroom',
    };
    const EXPECTED_CONFIG = {
        emoji: {
            heartbeat: '[爱心]',
            login: '[太阳]',
            logout: '[月亮]',
            ready: '[拳头]',
        },
        intervalSeconds: 60,
        room: 'test@chatroom',
    };
    const result = options_1.buildConfig(CONFIG);
    t.deepEqual(result, EXPECTED_CONFIG, 'should get merged config');
}));
tstest_1.default('buildConfig({ room: "id" })', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const ROOM_ID = '43214123@chatroom';
    const CONFIG = {
        room: ROOM_ID,
    };
    const result = options_1.buildConfig(CONFIG);
    t.equal(result.room, ROOM_ID, 'should set room id for config right');
    t.isNot(result.contact, 'should not have any contact data');
}));
//# sourceMappingURL=options.spec.js.map