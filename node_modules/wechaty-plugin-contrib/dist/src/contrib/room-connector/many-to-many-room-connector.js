"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManyToManyRoomConnector = exports.isMatchConfig = void 0;
/**
 * Author: Huan LI https://github.com/huan
 * Date: May 2020
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../../matchers/mod");
const mod_2 = require("../../mappers/mod");
const mod_3 = require("../../talkers/mod");
exports.isMatchConfig = (config) => {
    wechaty_1.log.verbose('WechatyPluginContrib', 'ManyToManyRoomConnector() isMatchConfig(%s)', JSON.stringify(config));
    const matchWhitelist = mod_1.messageMatcher(config.whitelist);
    const matchBlacklist = mod_1.messageMatcher(config.blacklist);
    return function isMatch(message) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.verbose('WechatyPluginContrib', 'ManyToManyRoomConnector() isMatchConfig() isMatch(%s)', message.toString());
            if (message.self()) {
                return;
            }
            const room = message.room();
            if (!room || !config.many.includes(room.id)) {
                return;
            }
            if (yield matchWhitelist(message)) {
                return true;
            }
            if (yield matchBlacklist(message)) {
                return false;
            }
            return true;
        });
    };
};
function ManyToManyRoomConnector(config) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'ManyToManyRoomConnector(%s)', JSON.stringify(config));
    const isMatch = exports.isMatchConfig(config);
    const mapMessage = mod_2.messageMapper(config.map);
    const matchAndForward = (message, roomList) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        const match = yield isMatch(message);
        if (!match) {
            return;
        }
        const msgList = yield mapMessage(message);
        if (msgList.length <= 0) {
            return;
        }
        for (const room of roomList) {
            if (room.id === ((_a = message.room()) === null || _a === void 0 ? void 0 : _a.id)) {
                continue;
            }
            const talkRoom = mod_3.roomTalker(msgList);
            yield talkRoom(room);
        }
    });
    return function ManyToManyRoomConnectorPlugin(wechaty) {
        wechaty_1.log.verbose('WechatyPluginContrib', 'ManyToManyRoomConnectorPlugin(%s) installing ...', wechaty);
        let manyRoomList;
        /**
         * We need to wait wechaty start before we can build our manyRoomList.
         */
        wechaty.once('message', (onceMsg) => __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.verbose('WechatyPluginContrib', 'ManyToManyRoomConnectorPlugin(%s) once(message) installing ...', wechaty);
            if (!manyRoomList) {
                manyRoomList = config.many.map(id => wechaty.Room.load(id));
            }
            yield matchAndForward(onceMsg, manyRoomList);
            wechaty.on('message', message => matchAndForward(message, manyRoomList));
        }));
    };
}
exports.ManyToManyRoomConnector = ManyToManyRoomConnector;
//# sourceMappingURL=many-to-many-room-connector.js.map