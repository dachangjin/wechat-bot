#!/usr/bin/env ts-node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tstest_1 = __importDefault(require("tstest"));
const language_matcher_1 = require("./language-matcher");
tstest_1.default('detectLanguage()', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const ENGLISH_TEXT = 'hello';
    const resultList = language_matcher_1.detectLanguage(ENGLISH_TEXT);
    t.true(Array.isArray(resultList), 'should return a array');
    t.true(resultList.length > 0, 'should get a non-empty array');
}));
tstest_1.default('includeLanguage()', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const CHINESE_TEXT = '你好';
    const ENGLISH_TEXT = 'hello';
    let resultList = language_matcher_1.detectLanguage(CHINESE_TEXT);
    // console.info(resultList)
    t.true(language_matcher_1.includeLanguage(resultList, 'chinese'), 'should detect Chinese language');
    resultList = language_matcher_1.detectLanguage(ENGLISH_TEXT);
    // console.info(resultList)
    t.true(language_matcher_1.includeLanguage(resultList, 'english'), 'should detect English language');
}));
tstest_1.default('languageMatcher()', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const CHINESE_TEXT = '你好';
    const ENGLISH_TEXT = 'hello';
    const matchLanguage = language_matcher_1.languageMatcher('chinese');
    let result = matchLanguage(CHINESE_TEXT);
    t.true(result, 'should match Chinese language');
    result = matchLanguage(ENGLISH_TEXT);
    t.false(result, 'should not match English language');
}));
tstest_1.default('languageMatcher() with array options', (t) => __awaiter(void 0, void 0, void 0, function* () {
    const CHINESE_TEXT = '你好';
    const ENGLISH_TEXT = 'hello';
    const matchLanguage = language_matcher_1.languageMatcher(['chinese', 'english']);
    let result = matchLanguage(CHINESE_TEXT);
    t.true(result, 'should match Chinese language');
    result = matchLanguage(ENGLISH_TEXT);
    t.true(result, 'should match English language');
}));
//# sourceMappingURL=language-matcher.spec.js.map