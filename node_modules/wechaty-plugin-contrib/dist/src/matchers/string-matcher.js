"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringMatcher = void 0;
const wechaty_1 = require("wechaty");
function stringMatcher(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'stringMatcher(%s)', JSON.stringify(options));
    if (!options) {
        return () => false;
    }
    if (!Array.isArray(options)) {
        options = [options];
    }
    const optionsList = options;
    return function matchString(str) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.silly('WechatyPluginContrib', 'stringMatcher() matchString(%s)', str);
            let isMatch = false;
            for (const option of optionsList) {
                if (typeof option === 'boolean') {
                    isMatch = option;
                }
                if (typeof option === 'string') {
                    isMatch = str === option;
                }
                else if (option instanceof RegExp) {
                    isMatch = option.test(str);
                }
                else if (option instanceof Function) {
                    isMatch = yield option(str);
                }
                else {
                    throw new Error('configPassword is unknown: ' + option);
                }
                if (isMatch) {
                    return true;
                }
            }
            // no match
            return false;
        });
    };
}
exports.stringMatcher = stringMatcher;
//# sourceMappingURL=string-matcher.js.map