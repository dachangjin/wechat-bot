"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageMatcher = void 0;
const wechaty_1 = require("wechaty");
function messageMatcher(matcherOptions) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'messageMatcher(%s)', JSON.stringify(matcherOptions));
    if (!matcherOptions) {
        return (..._) => false;
    }
    if (!Array.isArray(matcherOptions)) {
        matcherOptions = [matcherOptions];
    }
    const matcherOptionList = matcherOptions;
    return function matchMessage(message) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.silly('WechatyPluginContrib', 'messageMatcher() matchMessage(%s)', message);
            let isMatch = false;
            for (const option of matcherOptionList) {
                if (typeof option === 'boolean') {
                    isMatch = option;
                }
                else if (typeof option === 'string') {
                    const idCheckList = [
                        (_a = message.from()) === null || _a === void 0 ? void 0 : _a.id,
                        (_b = message.room()) === null || _b === void 0 ? void 0 : _b.id,
                    ];
                    isMatch = idCheckList.includes(option);
                }
                else if (option instanceof RegExp) {
                    const text = yield message.mentionText();
                    const textCheckList = [
                        text,
                        (_c = message.from()) === null || _c === void 0 ? void 0 : _c.name(),
                        yield ((_d = message.room()) === null || _d === void 0 ? void 0 : _d.topic()),
                    ];
                    isMatch = textCheckList.some(text => text && option.test(text));
                }
                else if (typeof option === 'function') {
                    isMatch = yield option(message);
                }
                else {
                    throw new Error('unknown matcher ' + option);
                }
                if (isMatch) {
                    return true;
                }
            }
            // no match
            return false;
        });
    };
}
exports.messageMatcher = messageMatcher;
//# sourceMappingURL=message-matcher.js.map