"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageMapper = void 0;
const wechaty_1 = require("wechaty");
function messageMapper(mapperOptions) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'messageMapper(%s)', JSON.stringify(mapperOptions));
    return function mapMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.verbose('WechatyPluginContrib', 'mapMessage(%s)', message);
            return normalizeMappedMessageList(mapperOptions, message);
        });
    };
}
exports.messageMapper = messageMapper;
function normalizeMappedMessageList(options, message) {
    return __awaiter(this, void 0, void 0, function* () {
        wechaty_1.log.verbose('WechatyPluginContrib', 'normalizeMappedMessageList(%s, %s)', JSON.stringify(options), message);
        let msgList = [];
        let optionList;
        if (Array.isArray(options)) {
            optionList = options;
        }
        else {
            optionList = [options];
        }
        for (const option of optionList) {
            if (!option) {
                continue;
            }
            if (typeof option === 'function') {
                const ret = yield option(message);
                if (ret) {
                    msgList.push(...yield normalizeMappedMessageList(ret, message));
                }
            }
            else {
                msgList.push(option);
            }
        }
        return msgList;
    });
}
//# sourceMappingURL=message-mapper.js.map