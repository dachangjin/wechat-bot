"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contactTalker = void 0;
const wechaty_1 = require("wechaty");
const mustache_1 = __importDefault(require("mustache"));
function contactTalker(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'contactTalker(%s)', JSON.stringify(options));
    if (!options) {
        return () => undefined;
    }
    if (!Array.isArray(options)) {
        options = [options];
    }
    const optionList = options;
    return function talkContact(contact, room, mustacheView) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.silly('WechatyPluginContrib', 'contactTalker() talkContact(%s, %s)', contact, mustacheView
                ? JSON.stringify(mustacheView)
                : '');
            for (const option of optionList) {
                let text;
                if (typeof option === 'string') {
                    text = option;
                }
                else if (option instanceof Function) {
                    text = yield option(contact, room);
                }
                else {
                    throw new Error('talkContact() option unknown: ' + option);
                }
                if (text) {
                    if (mustacheView) {
                        text = mustache_1.default.render(text, mustacheView);
                    }
                    yield contact.say(text);
                }
                yield contact.wechaty.sleep(5 * 1000);
            }
        });
    };
}
exports.contactTalker = contactTalker;
//# sourceMappingURL=contact-talker.js.map