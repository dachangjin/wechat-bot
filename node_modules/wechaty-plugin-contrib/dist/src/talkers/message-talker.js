"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageTalker = void 0;
/* eslint-disable brace-style */
const wechaty_1 = require("wechaty");
const mustache_1 = __importDefault(require("mustache"));
const mapper = __importStar(require("../mappers/message-mapper"));
function messageTalker(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'messageTalker(%s)', JSON.stringify(options));
    if (!options) {
        return () => undefined;
    }
    const mapMessage = mapper.messageMapper(options);
    return function talkMessage(message, mustacheView) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.silly('WechatyPluginContrib', 'messageTalker() talkMessage(%s, %s)', message, mustacheView
                ? JSON.stringify(mustacheView)
                : '');
            const msgList = yield mapMessage(message);
            for (const msg of msgList) {
                if (!msg) {
                    continue;
                }
                if (typeof msg === 'string') {
                    let text = msg;
                    if (mustacheView) {
                        text = mustache_1.default.render(msg, mustacheView);
                    }
                    yield message.say(text);
                }
                else {
                    /**
                     * Super verbose:
                     *  https://github.com/microsoft/TypeScript/issues/14107
                     */
                    if (msg instanceof wechaty_1.FileBox) {
                        yield message.say(msg);
                    }
                    else if (msg instanceof wechaty_1.Contact) {
                        yield message.say(msg);
                    }
                    else if (msg instanceof wechaty_1.UrlLink) {
                        yield message.say(msg);
                    }
                    else if (msg instanceof wechaty_1.MiniProgram) {
                        yield message.say(msg);
                    }
                    else if (msg instanceof wechaty_1.Message) {
                        yield message.say(msg);
                    }
                    else {
                        throw new Error('unknown msg type: ' + typeof msg);
                    }
                }
                yield message.wechaty.sleep(1000);
            }
        });
    };
}
exports.messageTalker = messageTalker;
//# sourceMappingURL=message-talker.js.map