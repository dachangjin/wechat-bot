"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.roomTalker = void 0;
/* eslint-disable brace-style */
const wechaty_1 = require("wechaty");
const mustache_1 = __importDefault(require("mustache"));
function roomTalker(options) {
    wechaty_1.log.verbose('WechatyPluginContrib', 'roomTalker(%s)', JSON.stringify(options));
    if (!options) {
        return () => undefined;
    }
    if (!Array.isArray(options)) {
        options = [options];
    }
    const optionList = options;
    return function talkRoom(room, contact, mustacheView) {
        return __awaiter(this, void 0, void 0, function* () {
            wechaty_1.log.silly('WechatyPluginContrib', 'roomTalker() talkRoom(%s, %s)', room, contact, mustacheView
                ? JSON.stringify(mustacheView)
                : '');
            for (const option of optionList) {
                let msg;
                if (option instanceof Function) {
                    msg = yield option(room, contact);
                }
                else {
                    msg = option;
                }
                if (!msg) {
                    continue;
                }
                if (typeof msg === 'string') {
                    if (mustacheView) {
                        msg = mustache_1.default.render(msg, mustacheView);
                    }
                    if (contact) {
                        yield room.say(msg, contact);
                    }
                    else {
                        yield room.say(msg);
                    }
                }
                /**
                 * Super verbose:
                 *  https://github.com/microsoft/TypeScript/issues/14107
                 */
                else if (msg instanceof wechaty_1.FileBox) {
                    yield room.say(msg);
                }
                else if (msg instanceof wechaty_1.Contact) {
                    yield room.say(msg);
                }
                else if (msg instanceof wechaty_1.UrlLink) {
                    yield room.say(msg);
                }
                else if (msg instanceof wechaty_1.MiniProgram) {
                    yield room.say(msg);
                }
                else if (msg instanceof wechaty_1.Message) {
                    yield room.say(msg);
                }
                else {
                    throw new Error('talkRoom() msg unknown: ' + msg);
                }
                yield room.wechaty.sleep(1000);
            }
        });
    };
}
exports.roomTalker = roomTalker;
//# sourceMappingURL=room-talker.js.map