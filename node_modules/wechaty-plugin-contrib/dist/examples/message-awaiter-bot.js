"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *   Wechaty - https://github.com/wechaty/wechaty
 *
 *   @copyright 2016-now Huan LI <zixia@zixia.net>
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
const wechaty_1 = require("wechaty");
const mod_1 = require("../src/mod"); // from 'wechaty-plugin-contrib'
const bot = new wechaty_1.Wechaty({
    name: 'message-awaiter-bot',
});
bot.use(mod_1.QRCodeTerminal(), mod_1.DingDong(), mod_1.EventLogger(), mod_1.MessageAwaiter());
bot.on('message', (msg) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    if (msg.text() === 'repeat me') {
        yield msg.say('what to repeat?');
        let repeatMsg = yield bot.waitForMessage({ contact: (_a = msg.from()) === null || _a === void 0 ? void 0 : _a.id, room: (_b = msg.room()) === null || _b === void 0 ? void 0 : _b.id });
        yield repeatMsg.say(repeatMsg.text());
    }
    else if (msg.text() === 'test') {
        yield msg.say('please reply a message with digits in a minute');
        try {
            let repeatMsg = yield bot.waitForMessage({
                contact: (_c = msg.from()) === null || _c === void 0 ? void 0 : _c.id,
                room: (_d = msg.room()) === null || _d === void 0 ? void 0 : _d.id,
                text: /\d/,
                timeoutSecond: 60,
            });
            yield repeatMsg.say(repeatMsg.text());
        }
        catch (err) {
            yield msg.say(String(err));
        }
    }
}));
bot.start()
    .catch(console.error);
//# sourceMappingURL=message-awaiter-bot.js.map